// Node packages
const webpack = require('webpack');
const babel = require('@babel/core');
const glob = require('glob');
const path = require('path');
const argv = require('minimist')(process.argv.slice(2));
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

// Babel
const babelPreset = require('@babel/preset-env');
const pluginSyntaxDynamicImport = require('@babel/plugin-syntax-dynamic-import');
const pluginTransformTsMetadata = require('babel-plugin-transform-typescript-metadata');
const pluginProposalDecorators = [require('@babel/plugin-proposal-decorators'), { 'legacy': true }];
const pluginProposalClassProperties = [require('@babel/plugin-proposal-class-properties'), { 'loose': true }];
const pluginProposalPrivateMethods = [require('@babel/plugin-proposal-private-methods'), { "loose": true }];
const pluginProposalPrivatePropertyInObject = [require('@babel/plugin-proposal-private-property-in-object'), { "loose": true }];
const pluginProposalObjectRestSpread = require('@babel/plugin-proposal-object-rest-spread');
const pluginTransformTs = require('@babel/plugin-transform-typescript');
const pluginProposalNullishCoalescingOperator = require('@babel/plugin-proposal-nullish-coalescing-operator');

const babelOptions = {
    presets: [
        [babelPreset, {
            'debug': true,
            // Allow tree shaking
            // https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/
            'modules': false,
            // Set the browsers to polyfill here.
            'targets': {
                'browsers': [
                    // keep sync'd with package.json
                    'last 1 version',
                    '> 0.5% in US',
                    'not ie <= 11',
                    'not ie_mob 11'
                ]
            },
            'useBuiltIns': 'usage',
            'corejs': '3.23.1' // keep matched with version in package.json
        }]
    ],
    plugins: [
        babel.createConfigItem(pluginSyntaxDynamicImport),
        babel.createConfigItem(pluginTransformTsMetadata),
        babel.createConfigItem(pluginProposalDecorators),
        babel.createConfigItem(pluginProposalClassProperties),
        babel.createConfigItem(pluginProposalPrivateMethods),
        babel.createConfigItem(pluginProposalPrivatePropertyInObject),
        babel.createConfigItem(pluginProposalObjectRestSpread),
        babel.createConfigItem(pluginTransformTs),
        babel.createConfigItem(pluginProposalNullishCoalescingOperator)
    ],
    cacheDirectory: true
}

// Webpack plugins
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const WebpackRequireFrom = require('webpack-require-from');
const { StatsWriterPlugin } = require('webpack-stats-plugin');
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const ESLintWebpackPlugin = require('eslint-webpack-plugin');
const { VueLoaderPlugin } = require('vue-loader');

// Configs
const eslintrc = require('./eslintrc.js');
const imageServer = argv.imageserver === undefined ? '"//devpix.crutchfield.ad.crutchfield.com"' : `"//${argv.imageserver}"`;

function crutchPack(options) {
    options = options || {};
    const appPath = options.appPath || './';
    const entryFolder = options.entryFolder || '/js/entries';
    const outputFolder = options.outputFolder || 'compiledJs';
    const outputFileExtension = options.outputFileExtension || '.min.js';
    const useChunksFolder = options.useChunksFolder === undefined ? true : options.useChunksFolder;
    const watchFiles = options.watchFiles || false;
    const callback = options.callback || (() => { });
    const environmentVariables = options.environmentVariables || {};
    const compilerMode = options.compilerMode || 'development';
    const customAliases = options.customAliases || null;
    const useEvalSourceMaps = options.useEvalSourceMaps === undefined ? true : options.useEvalSourceMaps;

    // Aliases
    const aliases = {
        'vue': 'vue/dist/vue.esm-bundler.js'
    }

    // Merge custom aliases with default aliases
    if (customAliases !== null) {
        for (const alias in customAliases) {
            Object.defineProperty(aliases, alias, {
                enumerable: true,
                value: customAliases[alias]
            });
        }
    }

    // Environment variables
    const JS_OUTPUT_PATH = path.join(appPath, outputFolder);
    const WEBPACK_ENTRIES_PATH = path.join(appPath, entryFolder);
    let WEBPACK_OUTPUT_PATH = path.join(JS_OUTPUT_PATH, 'chunks');

    if (useChunksFolder === false) {
        WEBPACK_OUTPUT_PATH = JS_OUTPUT_PATH;
    }

    // Get the entry point names and file paths.
    const entries = {};

    const entriesGlobPattern = (WEBPACK_ENTRIES_PATH + '**/*.+(js|ts)').replace(/\\/g, '/');

    glob.sync(entriesGlobPattern)
        .forEach(f => {
            entries[path.basename(f).slice(0, -3)] = f
        });

    // Bundle/chunk JS assets.
    const compiler = webpack(
        {
            entry: entries,
            output: {
                filename: '[name]' + outputFileExtension,
                path: WEBPACK_OUTPUT_PATH,
                publicPath: WEBPACK_OUTPUT_PATH
            },
            mode: compilerMode,
            devtool: useEvalSourceMaps ? 'eval' : false,
            resolveLoader: {
                modules: ['node_modules', './node_modules/compiler/node_modules']
            },
            module: {
                rules: [
                    {
                        test: /\.vue$/,
                        loader: 'vue-loader'
                    },
                    {
                        test: /\.ts$/,
                        exclude: {
                            and: [/node_modules/],
                            not: [/crutch-vue/]
                        },
                        use: [
                            {
                                loader: 'babel-loader',
                                options: babelOptions
                            },
                            {
                                loader: 'ts-loader',
                                options: {
                                    appendTsSuffixTo: [/\.vue$/],
                                    transpileOnly: true
                                }
                            }
                        ]
                    },
                    {
                        test: /\.js$/,
                        exclude: {
                            and: [/node_modules/],
                            not: [/crutch-vue/]
                        },
                        use: [
                            {
                                loader: 'babel-loader',
                                options: babelOptions
                            }
                        ]
                    },
                    {
                        test: /\.mjs$/,
                        include: /node_modules/,
                        type: 'javascript/auto',
                    },
                    {
                        test: /\.scss$/,
                        use: [
                            /* temporarily disable CSS extraction until server is including stylesheet output */
                            /*compilerMode === 'production'
                                ? MiniCssExtractPlugin.loader
                                : 'vue-style-loader',*/
                            'vue-style-loader',
                            'css-loader',
                            {
                                loader: 'sass-loader',
                                options: {
                                    additionalData: `$imageServer: ${imageServer};`
                                }
                            }
                        ]
                    },
                    {
                        test: /\.css$/,
                        use: [
                            'vue-style-loader',
                            'css-loader'
                        ]
                    }
                ]
            },
            plugins: [
                new webpack.LoaderOptionsPlugin({
                    debug: true  // Turns on debugging for all loaders.
                }),
                new CleanWebpackPlugin({ // removes the chunks folder            
                    verbose: true,
                    cleanOnceBeforeBuildPatterns: [
                        JS_OUTPUT_PATH
                    ]
                }),
                new BundleAnalyzerPlugin({
                    analyzerMode: 'static',
                    defaultSizes: 'gzip',
                    openAnalyzer: false,
                    reportFilename: './webpack/bundle-analyzer-report.html'
                }),
                new webpack.SourceMapDevToolPlugin({
                    append: `\n//# sourceMappingURL=[url]`,
                    filename: '[name].js.map',
                }),
                new WebpackRequireFrom({
                    methodName: 'getChunkUrl'
                }),
                new StatsWriterPlugin({
                    fields: ['entrypoints', 'assets'],
                    stats: {
                        assetsSort: '!size'
                    },
                    filename: './webpack/entrypoints.json'
                }),
                // Regular TS type checking is disabled, using this plugin makes Webpack faster
                new ForkTsCheckerWebpackPlugin({
                    async: true,
                    typescript: {
                        diagnosticOptions: {
                            semantic: true,
                            syntactic: true,
                        },
                        extensions: {
                            vue: {
                                enabled: true,
                                compiler: 'vue/compiler-sfc'
                            }
                        }
                    }
                }),
                new ESLintWebpackPlugin({
                    baseConfig: eslintrc,
                    extensions: 'ts',
                    fix: true,
                    failOnError: compilerMode === 'production',
                    failOnWarning: compilerMode === 'production'
                }),
                new VueLoaderPlugin({
                    compiler: require('vue/compiler-sfc')
                }),
                new MiniCssExtractPlugin(),
                new webpack.DefinePlugin({
                    ...environmentVariables,
                    __VUE_OPTIONS_API__: true,
                    __VUE_PROD_DEVTOOLS__: false
                })
            ],
            resolve: {
                extensions: ['.js', '.ts', '.vue', '.scss', '.css'],
                alias: aliases
            }
        }
    );

    // Notify image server path
    console.log('\x1b[32m%s\x1b[0m', 'Image server: ', imageServer);

    // Let the developer know some magic is about to happen
    console.log('\x1b[33m%s\x1b[0m', 'JS/TS compilation imminent');

    if (!watchFiles) {
        // Call webpack run method
        compiler.run((err, stats) => {
            console.log(stats.toString({
                chunks: false,
                colors: true
            }));

            if (stats.hasErrors()) {
                callback(); // gulp signal for task completion

                console.log('\x1b[31m%s\x1b[0m', 'Webpack reported errors');
                console.log('\x1b[35m%s\x1b[0m', 'Compilation complete.');

                process.exit(1);
            }
            else {
                console.log('\x1b[35m%s\x1b[0m', 'Compilation complete.');

                callback(); // gulp signal for task completion
            }
        });
    } else {
        compiler.watch({
            poll: true,
            ignored: /node_modules/
        }, (err, stats) => {
            console.log(stats.toString({
                chunks: false,
                colors: true
            }));

            if (stats.hasErrors()) {
                console.log('\x1b[31m%s\x1b[0m', 'Webpack reported errors');
            }

            console.log('\x1b[35m%s\x1b[0m', 'Compilation complete.');
        });
    }
}

exports.crutchPack = crutchPack;