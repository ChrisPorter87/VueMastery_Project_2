// Node
const fs = require('fs');
const path = require('path');
const rename = require('rename');

// Gulp
const gulp = require('gulp');
const argv = require('minimist')(process.argv.slice(2));
const gap = require('gulp-append-prepend');
const changed = require('gulp-dependencies-changed');
const using = require('gulp-using');
const plumber = require('gulp-plumber');
const sass = require('gulp-sass')(require('sass'));

// set image server for Sass files
function setImageServerSass() {
    return argv.imageserver === undefined
        ? gap.prependText('$imageServer: "//devpix.crutchfield.ad.crutchfield.com";')
        : gap.prependText('$imageServer: "//' + argv.imageserver + '";');
}

// whether to exit the process if an error is encountered
const exitOnError = argv.exitonerror !== undefined;

function crutchSass(options) {
    options = options || {};
    const appPath = options.appPath || process.cwd();
    const bootstrapPath = options.bootstrapPath || path.join(appPath, 'node_modules/bootstrap/scss');
    const inputPath = options.inputPath || path.join(appPath, './styles/**/*.scss');
    const outputPath = options.outputPath || path.join(appPath, 'compiledCss');

    return gulp.src(inputPath, { allowEmpty: true })
        .pipe(plumber({
            errorHandler: function (err) {
                console.log(err);
                if (exitOnError) {
                    process.exit(1);
                } else {
                    this.emit('end');
                }
            }
        }))
        .pipe(setImageServerSass())
        .pipe(changed({
            matcher: /@import ['"]?([^'"]+)['"]?;/g,
            dest: function (srcRelPath, srcBasePath) {
                return rename(srcRelPath, function (fileObj) {
                    return {
                        dirname: path.join(outputPath + '/' + path.dirname(srcRelPath)), extname: '.css',
                    };
                });
            },
            pathResolver: (dependentPath, dependedMatch) => {
                // Transformations of sass imports (filename portion) to facilitate change watching.
                const transformations = [
                    (match) => match,
                    (match) => `${match}.scss`,
                    (match) => `_${match}`,
                    (match) => `_${match}.scss`,
                    (match) => `${match}.css`,
                ];

                // The full depended path as it would look with no filename transformations.
                const dependedPathNoTransform = path.join(path.dirname(dependentPath), dependedMatch);

                // The base path for the depdended file.
                const basePath = path.dirname(dependedPathNoTransform);

                // The filename for the depended file, with no filename transformations.
                const filename = path.basename(dependedPathNoTransform);

                for (const transformation of transformations) {
                    const dependedPath = path.join(basePath, transformation(filename));

                    // for general imports
                    if (fs.existsSync(dependedPath) && !fs.lstatSync(dependedPath).isDirectory()) {
                        return dependedPath;
                    }

                    // if the import a bootstrap file
                    const bootstrapDependency = path.join(bootstrapPath, transformation(filename));

                    if (fs.existsSync(bootstrapDependency) && !fs.lstatSync(bootstrapDependency).isDirectory()) {
                        return bootstrapDependency;
                    }
                }

                throw new Error(`[${dependentPath}] Could not find dependency "${dependedMatch}"`);
            }
        }))

        .pipe(using({ prefix: 'Recompiling sass: ', color: 'purple' }))
        .pipe(sass.sync({
            includePaths: [path.join(appPath, 'node_modules/bootstrap/scss')],
            outputStyle: 'compressed'
        }))
        .pipe(gulp.dest(outputPath, { mode: 0777 }));
};

exports.crutchSass = crutchSass;